/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Dialog.java to edit this template
 */
package curriculum.vitae.gui;

import curriculum.vitae.core.Instituto;
import curriculum.vitae.core.Pessoa;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.Provider;
import java.security.Security;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import utils.ObjectUtils;
import utils.SecurityUtils;

/**
 *
 * @author joaob
 */
public class Login extends java.awt.Dialog {

    CurriculumVitae cv;
    String email;
    String password;
    String codNome;
    Pessoa user;
    Instituto instituto;
    int indexUser = 0;
    int indexInst = 0;

    /**
     * Creates new form Login2
     *
     * @param parent
     * @param modal
     */
    public Login(CurriculumVitae parent, boolean modal) {
        this.cv = parent;
        super(parent, modal);
        this.setTitle("Login");
        initComponents();
        //Adiciona o Bouncy Castle à lista providers de segurança
        Security.addProvider(new BouncyCastleProvider());
        //Carrega todos os providers de serguança disponíveis no sistema
        loadProviders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        painelLoginUsers = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtPasswordUser = new javax.swing.JPasswordField();
        btnRegistoUser = new javax.swing.JButton();
        txtEmailUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnLoginUser = new javax.swing.JButton();
        painelLoginInstituto = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtCodNomeInst = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtPasswordInst = new javax.swing.JPasswordField();
        btnLoginInst = new javax.swing.JButton();
        btnRegistoInst = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/curriculum/vitae/images/loginImage.jpeg"))); // NOI18N
        jLabel5.setMaximumSize(new java.awt.Dimension(150, 125));
        jLabel5.setMinimumSize(new java.awt.Dimension(150, 125));
        jLabel5.setPreferredSize(new java.awt.Dimension(150, 150));

        btnRegistoUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRegistoUser.setForeground(new java.awt.Color(86, 137, 171));
        btnRegistoUser.setText("Registar-me");
        btnRegistoUser.setPreferredSize(new java.awt.Dimension(75, 30));
        btnRegistoUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistoUserActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(86, 137, 171));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("LOGIN");

        jLabel7.setText("Email");

        jLabel8.setText("Password");

        btnLoginUser.setBackground(new java.awt.Color(86, 137, 171));
        btnLoginUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLoginUser.setForeground(new java.awt.Color(255, 255, 255));
        btnLoginUser.setText("Login");
        btnLoginUser.setPreferredSize(new java.awt.Dimension(75, 30));
        btnLoginUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelLoginUsersLayout = new javax.swing.GroupLayout(painelLoginUsers);
        painelLoginUsers.setLayout(painelLoginUsersLayout);
        painelLoginUsersLayout.setHorizontalGroup(
            painelLoginUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLoginUsersLayout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(painelLoginUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelLoginUsersLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(painelLoginUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(painelLoginUsersLayout.createSequentialGroup()
                                .addComponent(btnLoginUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(btnRegistoUser, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(txtEmailUser)
                            .addComponent(txtPasswordUser)))
                    .addGroup(painelLoginUsersLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        painelLoginUsersLayout.setVerticalGroup(
            painelLoginUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelLoginUsersLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmailUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPasswordUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(painelLoginUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoginUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegistoUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
            .addGroup(painelLoginUsersLayout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("<html>&nbsp; Pessoa</html>", new javax.swing.ImageIcon(getClass().getResource("/curriculum/vitae/images/user.png")), painelLoginUsers); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/curriculum/vitae/images/loginInstituto.jpg"))); // NOI18N
        jLabel9.setMaximumSize(new java.awt.Dimension(150, 125));
        jLabel9.setMinimumSize(new java.awt.Dimension(150, 125));
        jLabel9.setPreferredSize(new java.awt.Dimension(150, 150));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 153, 51));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("LOGIN");

        jLabel11.setText("Código do Instituto");

        jLabel12.setText("Password");

        btnLoginInst.setBackground(new java.awt.Color(0, 153, 51));
        btnLoginInst.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLoginInst.setForeground(new java.awt.Color(255, 255, 255));
        btnLoginInst.setText("Login");
        btnLoginInst.setPreferredSize(new java.awt.Dimension(75, 30));
        btnLoginInst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginInstActionPerformed(evt);
            }
        });

        btnRegistoInst.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRegistoInst.setForeground(new java.awt.Color(0, 153, 51));
        btnRegistoInst.setText("Registar-me");
        btnRegistoInst.setPreferredSize(new java.awt.Dimension(75, 30));
        btnRegistoInst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistoInstActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelLoginInstitutoLayout = new javax.swing.GroupLayout(painelLoginInstituto);
        painelLoginInstituto.setLayout(painelLoginInstitutoLayout);
        painelLoginInstitutoLayout.setHorizontalGroup(
            painelLoginInstitutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLoginInstitutoLayout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(painelLoginInstitutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelLoginInstitutoLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(painelLoginInstitutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(painelLoginInstitutoLayout.createSequentialGroup()
                                .addComponent(btnLoginInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(btnRegistoInst, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(txtCodNomeInst)
                            .addComponent(txtPasswordInst, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        painelLoginInstitutoLayout.setVerticalGroup(
            painelLoginInstitutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLoginInstitutoLayout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(painelLoginInstitutoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel10)
                .addGap(24, 24, 24)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCodNomeInst, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPasswordInst, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(painelLoginInstitutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoginInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegistoInst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("<html>&nbsp;Instituto</html>", new javax.swing.ImageIcon(getClass().getResource("/curriculum/vitae/images/Instituto.png")), painelLoginInstituto); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnRegistoUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistoUserActionPerformed
        // TODO add your handling code here:
        dispose();
        new Registo(cv, true).setVisible(true);
    }//GEN-LAST:event_btnRegistoUserActionPerformed

    private void btnLoginUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginUserActionPerformed
        try {
            // TODO add your handling code here:
            loginUser();
        } catch (Exception ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginUserActionPerformed

    private void btnLoginInstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginInstActionPerformed
        try {
            // TODO add your handling code here:
            loginInst();
        } catch (Exception ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginInstActionPerformed

    private void btnRegistoInstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistoInstActionPerformed
        // TODO add your handling code here:
        dispose();
        new Registo(cv, true).setVisible(true);
    }//GEN-LAST:event_btnRegistoInstActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoginInst;
    private javax.swing.JButton btnLoginUser;
    private javax.swing.JButton btnRegistoInst;
    private javax.swing.JButton btnRegistoUser;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel painelLoginInstituto;
    private javax.swing.JPanel painelLoginUsers;
    private javax.swing.JTextField txtCodNomeInst;
    private javax.swing.JTextField txtEmailUser;
    private javax.swing.JPasswordField txtPasswordInst;
    private javax.swing.JPasswordField txtPasswordUser;
    // End of variables declaration//GEN-END:variables

    //################################################## U T I L I Z A D O R ################################################################
    //Dado o email e a password introduzida pela Pessoa, estabelece a sessão da Pessoa, caso sejam válidos
    private void loginUser() throws IOException, Exception {
        email = txtEmailUser.getText().trim();
        password = new String(txtPasswordUser.getPassword());
        //Cria uma nova Pessoa com base no email introduzido pelo utilizador
        user = new Pessoa(email);
        //Vai verificar se o utilizador existe no sistema
        if (verificaUtilizador(email)) {
            //Caso exista no sistema, vai verificar se a password introduzida, desencripta a chave privada
            if (verificaCamposUser(email, password)) {
                //Caso a password esteja correta, a Pessoa irá aceder ao sistema
                user = new Pessoa(cv.listUsers.get(indexUser));
                JOptionPane.showMessageDialog(null, "Bem-vindo!!", "Login Bem Sucedido", 3);
                //O número de logins da Pessoa será incrementado
                cv.listUsers.get(indexUser).setNumLogin(user.getNumLogin() + 1);
                //A data do último login será redefinida
                cv.listUsers.get(indexUser).setLastLogin(Date.from(Instant.now()));
                //Vai verificar se o utilizador já introduziu os dados pessoais
                if (user.getDados() == null) {
                    //Caso não tenha introduzido, será redirecionado para a página para adicionar os dados pessoais
                    dispose();
                    new adicionarDadosPessoais(cv, true, indexUser).setVisible(true);
                } else {
                    //Caso possua, é redirecionado para a página do perfil da Pessoa
                    dispose();
                    new perfilUser(cv, true, indexUser).setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Introduza a password correta!!", "Password Incorreta", 1);
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Email não está registado no sistema!!", "Email Inválido", 2);
        }
    }

    //Verifica se a password introduzida desencripta a chave privada de uma pessoa
    private boolean verificaCamposUser(String email, String password) {
        boolean verifica = false;
        for (int i = 0; i < cv.listUsers.size(); i++) {
            try {
                user = new Pessoa(email);
                if (user.load(password)) {
                    verifica = true;
                    break;
                } else {
                    verifica = false;
                }
            } catch (Exception ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return verifica;
    }

    //Verifica se a pessoa está registada no sistema
    private boolean verificaUtilizador(String email) {
        boolean verifica = false;
        for (int i = 0; i < cv.listUsers.size(); i++) {
            user = new Pessoa(cv.listUsers.get(i));
            if (!user.getEmail().equals(email)) {
                verifica = false;
            } else {
                indexUser = i;
                verifica = true;
                break;
            }
        }
        return verifica;
    }

    //################################################## I N S T I T U T O ################################################################
    //Dado o código nome e a password introduzida pelo Instituto, estabelece a sessão da Instituto, caso sejam válidos
    private void loginInst() throws Exception {
        codNome = txtCodNomeInst.getText().trim();
        password = new String(txtPasswordInst.getPassword());
        //Verifica se o código nome está registado no sistema
        if (verificaInstituto(codNome)) {
            //Caso esteja, vai verificar se a password introduzida é válida
            if (verificaCamposInstituto(codNome, password)) {
                //Sendo a password válida, vai desencriptar a chave privada, enquanto estiver com a sessão ativa
                instituto = new Instituto(cv.listInst.get(indexInst));
                instituto.load(password);
                JOptionPane.showMessageDialog(null, "Bem-vindo!!", "Login Bem Sucedido", 3);
                //Incrementa o número de logins
                cv.listInst.get(indexInst).setNumLogin(instituto.getNumLogin() + 1);
                //Atualiza a data do último login efetuado
                cv.listInst.get(indexInst).setLastLogin(Date.from(Instant.now()));
                //Verifica se os dados Institucionais, já foram definidos
                if (instituto.getDadosInst()== null) {
                    //Caso não tenham sido, redireciona o Instituto para a página para adicionar os dados
                    dispose();
                    new adicionarDadosInstitucionais(cv, true, indexInst).setVisible(true);
                } else {
                    dispose();
                    //Caso estejam definidos, o utilizador Instituto é redirecionado para o seu perfil
                    new perfilInstituto(cv, true, indexInst).setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Introduza a password correta!!", "Password Incorreta", 1);
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Código Nome não está registado no sistema!!", "Código Nome Inválido", 2);
        }
    }

    //Verifica se a password introduzida é válida para um dado Instituto
    boolean verificaCamposInstituto(String codNome, String password) {
        boolean verifica = false;
        for (int i = 0; i < cv.listInst.size(); i++) {
            try {
                instituto = new Instituto(codNome);
                if (instituto.load(password)) {
                    verifica = true;
                    break;
                } else {
                    verifica = false;
                }
            } catch (Exception ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return verifica;
    }

    //Verifica se um Instituto existe no sistema
    private boolean verificaInstituto(String codNome) {
        boolean verifica = false;
        for (int i = 0; i < cv.listInst.size(); i++) {
            instituto = new Instituto(cv.listInst.get(i));
            if (!instituto.getCodNome().equals(codNome)) {
                verifica = false;
            } else {
                indexInst = i;
                verifica = true;
                break;
            }
        }
        return verifica;
    }

    //################################################## P R O V I D E R ################################################################
    //Carrega todos os providers existente na segurança
    public static void loadProviders() {
        Provider providers[] = Security.getProviders();
        //todos os fornecedores do segurança
        for (Provider provider : providers) {
            StringBuilder txt = new StringBuilder();
            List<String> lst = new ArrayList<>();
            //serviços fornecidos
            Set<Provider.Service> services = provider.getServices();
            for (Provider.Service service : services) {
                lst.add(String.format("%-20s %s\n", service.getType(), service.getAlgorithm()));
            }
            Collections.sort(lst);
            for (String service : lst) {
                txt.append(service);
            }
        }
    }
}
